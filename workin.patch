From 71052b79f6bba6a34d29ed0ae5bd96bfc46de3f8 Mon Sep 17 00:00:00 2001
From: Thomas D'Silva <tdsilva@apache.org>
Date: Thu, 4 Apr 2019 16:34:24 -0700
Subject: [PATCH] take 2

---
 .../apache/phoenix/end2end/BasePermissionsIT.java  | 118 ++++++--------
 .../phoenix/end2end/ChangePermissionsIT.java       | 170 ++++++++++-----------
 .../phoenix/end2end/SystemTablePermissionsIT.java  |  19 +--
 .../phoenix/end2end/TableDDLPermissionsIT.java     |   5 -
 4 files changed, 139 insertions(+), 173 deletions(-)

diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/BasePermissionsIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/BasePermissionsIT.java
index 81a68b455..77e3ce756 100644
--- a/phoenix-core/src/it/java/org/apache/phoenix/end2end/BasePermissionsIT.java
+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/BasePermissionsIT.java
@@ -16,35 +16,13 @@
  */
 package org.apache.phoenix.end2end;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-import java.io.IOException;
-import java.lang.reflect.UndeclaredThrowableException;
-import java.security.PrivilegedExceptionAction;
-import java.sql.Connection;
-import java.sql.DriverManager;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.sql.Statement;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Properties;
-import java.util.Set;
-
+import com.google.common.base.Joiner;
+import com.google.common.base.Throwables;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.AuthUtil;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
-import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.LocalHBaseCluster;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.security.AccessDeniedException;
@@ -58,20 +36,42 @@ import org.apache.phoenix.query.BaseTest;
 import org.apache.phoenix.query.QueryConstants;
 import org.apache.phoenix.query.QueryServices;
 import org.apache.phoenix.util.PhoenixRuntime;
-import org.junit.After;
+import org.junit.Before;
 import org.junit.BeforeClass;
+import org.junit.experimental.categories.Category;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
-import com.google.common.base.Joiner;
-import com.google.common.base.Throwables;
+import java.io.IOException;
+import java.lang.reflect.UndeclaredThrowableException;
+import java.security.PrivilegedExceptionAction;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Properties;
+import java.util.Set;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 
+@Category(NeedsOwnMiniClusterTest.class)
 @RunWith(Parameterized.class)
 public class BasePermissionsIT extends BaseTest {
 
     private static final Log LOG = LogFactory.getLog(BasePermissionsIT.class);
 
-    static String SUPERUSER;
+    static String SUPERUSER = System.getProperty("user.name");
 
     static HBaseTestingUtility testUtil;
     static final Set<String> PHOENIX_SYSTEM_TABLES =
@@ -98,8 +98,8 @@ public class BasePermissionsIT extends BaseTest {
     // Instead use org.apache.hadoop.hbase.security.User class for testing purposes.
 
     // Super User has all the access
-    User superUser1 = null;
-    User superUser2 = null;
+    static User superUser1 = null;
+    static User superUser2 = null;
 
     // Regular users are granted and revoked permissions as needed
     User regularUser1 = null;
@@ -125,14 +125,6 @@ public class BasePermissionsIT extends BaseTest {
 
     @BeforeClass
     public static void doSetup() throws Exception {
-        SUPERUSER = System.getProperty("user.name");
-    }
-
-    void startNewMiniCluster() throws Exception {
-        startNewMiniCluster(new Configuration());
-    }
-    
-    void startNewMiniCluster(Configuration overrideConf) throws Exception{
         if (null != testUtil) {
             testUtil.shutdownMiniCluster();
             testUtil = null;
@@ -142,37 +134,35 @@ public class BasePermissionsIT extends BaseTest {
 
         Configuration config = testUtil.getConfiguration();
         enablePhoenixHBaseAuthorization(config);
-        configureNamespacesOnServer(config);
+        configureNamespacesOnServer(config, true);
         config.setBoolean(LocalHBaseCluster.ASSIGN_RANDOM_PORTS, true);
-        if (overrideConf != null) {
-            config.addResource(overrideConf);
-        }
 
         testUtil.startMiniCluster(1);
-        initializeUsers(testUtil.getConfiguration());
+        superUser1 = User.createUserForTesting(config, SUPERUSER, new String[0]);
+        superUser2 = User.createUserForTesting(config, "superUser2", new String[0]);
     }
 
-    private void initializeUsers(Configuration configuration) {
-
-        superUser1 = User.createUserForTesting(configuration, SUPERUSER, new String[0]);
-        superUser2 = User.createUserForTesting(configuration, "superUser2", new String[0]);
+    @Before
+    public void setUp() {
+        Configuration configuration = testUtil.getConfiguration();
 
-        regularUser1 = User.createUserForTesting(configuration, "regularUser1", new String[0]);
-        regularUser2 = User.createUserForTesting(configuration, "regularUser2", new String[0]);
-        regularUser3 = User.createUserForTesting(configuration, "regularUser3", new String[0]);
-        regularUser4 = User.createUserForTesting(configuration, "regularUser4", new String[0]);
+        regularUser1 = User.createUserForTesting(configuration, "regularUser1_"
+                + generateUniqueName(), new String[0]);
+        regularUser2 = User.createUserForTesting(configuration, "regularUser2_"
+                + generateUniqueName(), new String[0]);
+        regularUser3 = User.createUserForTesting(configuration, "regularUser3_"
+                + generateUniqueName(), new String[0]);
+        regularUser4 = User.createUserForTesting(configuration, "regularUser4_"
+                + generateUniqueName(), new String[0]);
 
-        groupUser = User.createUserForTesting(testUtil.getConfiguration(), "groupUser", new String[] {GROUP_SYSTEM_ACCESS});
+        groupUser = User.createUserForTesting(testUtil.getConfiguration(), "groupUser_"
+                + generateUniqueName() , new String[] {GROUP_SYSTEM_ACCESS});
 
-        unprivilegedUser = User.createUserForTesting(configuration, "unprivilegedUser", new String[0]);
+        unprivilegedUser = User.createUserForTesting(configuration, "unprivilegedUser_"
+                + generateUniqueName(), new String[0]);
     }
 
-    private void configureRandomHMasterPort(Configuration config) {
-        // Avoid multiple clusters trying to bind the master's info port (16010)
-        config.setInt(HConstants.MASTER_INFO_PORT, 0);
-    }
-
-    void enablePhoenixHBaseAuthorization(Configuration config) {
+    private static void enablePhoenixHBaseAuthorization(Configuration config) {
         config.set("hbase.superuser", SUPERUSER + "," + "superUser2");
         config.set("hbase.security.authorization", Boolean.TRUE.toString());
         config.set("hbase.security.exec.permission.checks", Boolean.TRUE.toString());
@@ -188,7 +178,7 @@ public class BasePermissionsIT extends BaseTest {
         config.set("hbase.regionserver.wal.codec", "org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec");
     }
 
-    void configureNamespacesOnServer(Configuration conf) {
+    private static void configureNamespacesOnServer(Configuration conf, boolean isNamespaceMapped) {
         conf.set(QueryServices.IS_NAMESPACE_MAPPING_ENABLED, Boolean.toString(isNamespaceMapped));
     }
 
@@ -197,14 +187,6 @@ public class BasePermissionsIT extends BaseTest {
         return Arrays.asList(false, true);
     }
 
-    @After
-    public void cleanup() throws Exception {
-        if (testUtil != null) {
-            testUtil.shutdownMiniCluster();
-            testUtil = null;
-        }
-    }
-
     public static HBaseTestingUtility getUtility(){
         return testUtil;
     }
diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/ChangePermissionsIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/ChangePermissionsIT.java
index 65f44c04f..ae5ad39fb 100644
--- a/phoenix-core/src/it/java/org/apache/phoenix/end2end/ChangePermissionsIT.java
+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/ChangePermissionsIT.java
@@ -13,8 +13,7 @@
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
- */
-package org.apache.phoenix.end2end;
+ */package org.apache.phoenix.end2end;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -23,33 +22,47 @@ import org.apache.hadoop.hbase.security.User;
 import org.apache.phoenix.jdbc.PhoenixDatabaseMetaData;
 import org.apache.phoenix.query.QueryConstants;
 import org.apache.phoenix.schema.TableNotFoundException;
-import org.apache.phoenix.util.SchemaUtil;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.FixMethodOrder;
 import org.junit.Test;
-import org.junit.experimental.categories.Category;
+import org.junit.runners.MethodSorters;
 
 /**
  * Test that verifies a user can read Phoenix tables with a minimal set of permissions.
  */
-@Category(NeedsOwnMiniClusterTest.class)
+@FixMethodOrder(MethodSorters.NAME_ASCENDING)
 public class ChangePermissionsIT extends BasePermissionsIT {
 
     private static final Log LOG = LogFactory.getLog(ChangePermissionsIT.class);
 
-    private static final String SCHEMA_NAME = "CHANGEPERMSSCHEMA";
-    private static final String TABLE_NAME =
-            ChangePermissionsIT.class.getSimpleName().toUpperCase();
-    private static final String FULL_TABLE_NAME = SCHEMA_NAME + "." + TABLE_NAME;
-    private static final String IDX1_TABLE_NAME = TABLE_NAME + "_IDX1";
-    private static final String IDX2_TABLE_NAME = TABLE_NAME + "_IDX2";
-    private static final String IDX3_TABLE_NAME = TABLE_NAME + "_IDX3";
-    private static final String LOCAL_IDX1_TABLE_NAME = TABLE_NAME + "_LIDX1";
-    private static final String VIEW1_TABLE_NAME = TABLE_NAME + "_V1";
-    private static final String VIEW2_TABLE_NAME = TABLE_NAME + "_V2";
+    private String schemaName;
+    private String tableName;
+    private String fullTableName;
+    private String idx1TableName;
+    private String idx2TableName;
+    private String idx3TableName;
+    private String localIdx1TableName;
+    private String view1TableName;
+    private String view2TableName;
 
     public ChangePermissionsIT(boolean isNamespaceMapped) throws Exception {
         super(isNamespaceMapped);
     }
 
+    @Before
+    public void setup() {
+        schemaName = generateUniqueName();
+        tableName = generateUniqueName();
+        fullTableName = schemaName + "." + tableName;
+        idx1TableName = tableName + "_IDX1";
+        idx2TableName = tableName + "_IDX2";
+        idx3TableName = tableName + "_IDX3";
+        localIdx1TableName = tableName + "_LIDX1";
+        view1TableName = tableName + "_V1";
+        view2TableName = tableName + "_V2";
+    }
+
     private void grantSystemTableAccess(User superUser, User... users) throws Exception {
         for(User user : users) {
             if(isNamespaceMapped) {
@@ -79,10 +92,8 @@ public class ChangePermissionsIT extends BasePermissionsIT {
      * Tests grant revoke permissions per user 1. if NS enabled -> on namespace 2. If NS disabled -> on tables
      */
     @Test
-    public void testRXPermsReqdForPhoenixConn() throws Exception {
-
-        startNewMiniCluster();
-
+    // this test needs to be run first
+    public void aTestRXPermsReqdForPhoenixConn() throws Exception {
         if(isNamespaceMapped) {
             // NS is enabled, CQSI tries creating SYSCAT, we get NamespaceNotFoundException exception for "SYSTEM" NS
             // We create custom ADE and throw it (and ignore NamespaceNotFoundException)
@@ -112,9 +123,6 @@ public class ChangePermissionsIT extends BasePermissionsIT {
      */
     @Test
     public void testSuperUserCanChangePerms() throws Exception {
-
-        startNewMiniCluster();
-
         // Grant System Table access to all users, else they can't create a Phoenix connection
         grantSystemTableAccess(superUser1, regularUser1, regularUser2, unprivilegedUser);
 
@@ -137,60 +145,56 @@ public class ChangePermissionsIT extends BasePermissionsIT {
      */
     @Test
     public void testReadPermsOnTableIndexAndView() throws Exception {
-
-        startNewMiniCluster();
-
         grantSystemTableAccess(superUser1, regularUser1, regularUser2, unprivilegedUser);
 
         // Create new schema and grant CREATE permissions to a user
         if(isNamespaceMapped) {
-            verifyAllowed(createSchema(SCHEMA_NAME), superUser1);
-            verifyAllowed(grantPermissions("C", regularUser1, SCHEMA_NAME, true), superUser1);
+            verifyAllowed(createSchema(schemaName), superUser1);
+            verifyAllowed(grantPermissions("C", regularUser1, schemaName, true), superUser1);
         } else {
             verifyAllowed(grantPermissions("C", regularUser1, surroundWithDoubleQuotes(QueryConstants.HBASE_DEFAULT_SCHEMA_NAME), true), superUser1);
         }
 
         // Create new table. Create indexes, views and view indexes on top of it. Verify the contents by querying it
-        verifyAllowed(createTable(FULL_TABLE_NAME), regularUser1);
-        verifyAllowed(readTable(FULL_TABLE_NAME), regularUser1);
-        verifyAllowed(createIndex(IDX1_TABLE_NAME, FULL_TABLE_NAME), regularUser1);
-        verifyAllowed(createIndex(IDX2_TABLE_NAME, FULL_TABLE_NAME), regularUser1);
-        verifyAllowed(createLocalIndex(LOCAL_IDX1_TABLE_NAME, FULL_TABLE_NAME), regularUser1);
-        verifyAllowed(createView(VIEW1_TABLE_NAME, FULL_TABLE_NAME), regularUser1);
-        verifyAllowed(createIndex(IDX3_TABLE_NAME, VIEW1_TABLE_NAME), regularUser1);
+        verifyAllowed(createTable(fullTableName), regularUser1);
+        verifyAllowed(readTable(fullTableName), regularUser1);
+        verifyAllowed(createIndex(idx1TableName, fullTableName), regularUser1);
+        verifyAllowed(createIndex(idx2TableName, fullTableName), regularUser1);
+        verifyAllowed(createLocalIndex(localIdx1TableName, fullTableName), regularUser1);
+        verifyAllowed(createView(view1TableName, fullTableName), regularUser1);
+        verifyAllowed(createIndex(idx3TableName, view1TableName), regularUser1);
 
         // RegularUser2 doesn't have any permissions. It can get a PhoenixConnection
         // However it cannot query table, indexes or views without READ perms
         verifyAllowed(getConnectionAction(), regularUser2);
-        verifyDenied(readTable(FULL_TABLE_NAME), AccessDeniedException.class, regularUser2);
-        verifyDenied(readTable(FULL_TABLE_NAME, IDX1_TABLE_NAME), AccessDeniedException.class, regularUser2);
-        verifyDenied(readTable(VIEW1_TABLE_NAME), AccessDeniedException.class, regularUser2);
-        verifyDenied(readTableWithoutVerification(SCHEMA_NAME + "." + IDX1_TABLE_NAME), AccessDeniedException.class, regularUser2);
+        verifyDenied(readTable(fullTableName), AccessDeniedException.class, regularUser2);
+        verifyDenied(readTable(fullTableName, idx1TableName), AccessDeniedException.class, regularUser2);
+        verifyDenied(readTable(view1TableName), AccessDeniedException.class, regularUser2);
+        verifyDenied(readTableWithoutVerification(schemaName + "." + idx1TableName), AccessDeniedException.class, regularUser2);
 
         // Grant READ permissions to RegularUser2 on the table
         // Permissions should propagate automatically to relevant physical tables such as global index and view index.
-        verifyAllowed(grantPermissions("RX", regularUser2, FULL_TABLE_NAME, false), regularUser1);
+        verifyAllowed(grantPermissions("RX", regularUser2, fullTableName, false), regularUser1);
         // Granting permissions directly to index tables should fail
-        verifyDenied(grantPermissions("W", regularUser2, SCHEMA_NAME + "." + IDX1_TABLE_NAME, false), AccessDeniedException.class, regularUser1);
+        verifyDenied(grantPermissions("W", regularUser2, schemaName + "." + idx1TableName, false), AccessDeniedException.class, regularUser1);
         // Granting permissions directly to views should fail. We expect TableNotFoundException since VIEWS are not physical tables
-        verifyDenied(grantPermissions("W", regularUser2, SCHEMA_NAME + "." + VIEW1_TABLE_NAME, false), TableNotFoundException.class, regularUser1);
+        verifyDenied(grantPermissions("W", regularUser2, schemaName + "." + view1TableName, false), TableNotFoundException.class, regularUser1);
 
         // Verify that all other access are successful now
-        verifyAllowed(readTable(FULL_TABLE_NAME), regularUser2);
-        verifyAllowed(readTable(FULL_TABLE_NAME, IDX1_TABLE_NAME), regularUser2);
-        verifyAllowed(readTable(FULL_TABLE_NAME, IDX2_TABLE_NAME), regularUser2);
-        verifyAllowed(readTable(FULL_TABLE_NAME, LOCAL_IDX1_TABLE_NAME), regularUser2);
-        verifyAllowed(readTableWithoutVerification(SCHEMA_NAME + "." + IDX1_TABLE_NAME), regularUser2);
-        verifyAllowed(readTable(VIEW1_TABLE_NAME), regularUser2);
-        verifyAllowed(readMultiTenantTableWithIndex(VIEW1_TABLE_NAME), regularUser2);
+        verifyAllowed(readTable(fullTableName), regularUser2);
+        verifyAllowed(readTable(fullTableName, idx1TableName), regularUser2);
+        verifyAllowed(readTable(fullTableName, idx2TableName), regularUser2);
+        verifyAllowed(readTable(fullTableName, localIdx1TableName), regularUser2);
+        verifyAllowed(readTableWithoutVerification(schemaName + "." + idx1TableName), regularUser2);
+        verifyAllowed(readTable(view1TableName), regularUser2);
+        verifyAllowed(readMultiTenantTableWithIndex(view1TableName), regularUser2);
 
         // Revoke READ permissions to RegularUser2 on the table
         // Permissions should propagate automatically to relevant physical tables such as global index and view index.
-        verifyAllowed(revokePermissions(regularUser2, FULL_TABLE_NAME, false), regularUser1);
+        verifyAllowed(revokePermissions(regularUser2, fullTableName, false), regularUser1);
         // READ query should fail now
-        verifyDenied(readTable(FULL_TABLE_NAME), AccessDeniedException.class, regularUser2);
-        verifyDenied(readTableWithoutVerification(SCHEMA_NAME + "." + IDX1_TABLE_NAME), AccessDeniedException.class, regularUser2);
-
+        verifyDenied(readTable(fullTableName), AccessDeniedException.class, regularUser2);
+        verifyDenied(readTableWithoutVerification(schemaName + "." + idx1TableName), AccessDeniedException.class, regularUser2);
     }
 
     /**
@@ -198,30 +202,27 @@ public class ChangePermissionsIT extends BasePermissionsIT {
      */
     @Test
     public void testGroupUserPerms() throws Exception {
-
-        startNewMiniCluster();
-
         if(isNamespaceMapped) {
-            verifyAllowed(createSchema(SCHEMA_NAME), superUser1);
+            verifyAllowed(createSchema(schemaName), superUser1);
         }
-        verifyAllowed(createTable(FULL_TABLE_NAME), superUser1);
+        verifyAllowed(createTable(fullTableName), superUser1);
 
         // Grant SYSTEM table access to GROUP_SYSTEM_ACCESS and regularUser1
         verifyAllowed(grantPermissions("RX", GROUP_SYSTEM_ACCESS, PHOENIX_SYSTEM_TABLES_IDENTIFIERS, false), superUser1);
         grantSystemTableAccess(superUser1, regularUser1);
 
         // Grant Permissions to Groups (Should be automatically applicable to all users inside it)
-        verifyAllowed(grantPermissions("ARX", GROUP_SYSTEM_ACCESS, FULL_TABLE_NAME, false), superUser1);
-        verifyAllowed(readTable(FULL_TABLE_NAME), groupUser);
+        verifyAllowed(grantPermissions("ARX", GROUP_SYSTEM_ACCESS, fullTableName, false), superUser1);
+        verifyAllowed(readTable(fullTableName), groupUser);
 
         // GroupUser is an admin and can grant perms to other users
-        verifyDenied(readTable(FULL_TABLE_NAME), AccessDeniedException.class, regularUser1);
-        verifyAllowed(grantPermissions("RX", regularUser1, FULL_TABLE_NAME, false), groupUser);
-        verifyAllowed(readTable(FULL_TABLE_NAME), regularUser1);
+        verifyDenied(readTable(fullTableName), AccessDeniedException.class, regularUser1);
+        verifyAllowed(grantPermissions("RX", regularUser1, fullTableName, false), groupUser);
+        verifyAllowed(readTable(fullTableName), regularUser1);
 
         // Revoke the perms and try accessing data again
-        verifyAllowed(revokePermissions(GROUP_SYSTEM_ACCESS, FULL_TABLE_NAME, false), superUser1);
-        verifyDenied(readTable(FULL_TABLE_NAME), AccessDeniedException.class, groupUser);
+        verifyAllowed(revokePermissions(GROUP_SYSTEM_ACCESS, fullTableName, false), superUser1);
+        verifyDenied(readTable(fullTableName), AccessDeniedException.class, groupUser);
     }
 
     /**
@@ -229,45 +230,42 @@ public class ChangePermissionsIT extends BasePermissionsIT {
      */
     @Test
     public void testMultiTenantTables() throws Exception {
-
-        startNewMiniCluster();
-
         grantSystemTableAccess(superUser1, regularUser1, regularUser2, regularUser3);
 
         if(isNamespaceMapped) {
-            verifyAllowed(createSchema(SCHEMA_NAME), superUser1);
-            verifyAllowed(grantPermissions("C", regularUser1, SCHEMA_NAME, true), superUser1);
+            verifyAllowed(createSchema(schemaName), superUser1);
+            verifyAllowed(grantPermissions("C", regularUser1, schemaName, true), superUser1);
         } else {
             verifyAllowed(grantPermissions("C", regularUser1, surroundWithDoubleQuotes(QueryConstants.HBASE_DEFAULT_SCHEMA_NAME), true), superUser1);
         }
 
         // Create MultiTenant Table (View Index Table should be automatically created)
         // At this point, the index table doesn't contain any data
-        verifyAllowed(createMultiTenantTable(FULL_TABLE_NAME), regularUser1);
+        verifyAllowed(createMultiTenantTable(fullTableName), regularUser1);
 
         // RegularUser2 doesn't have access yet, RegularUser1 should have RWXCA on the table
-        verifyDenied(readMultiTenantTableWithoutIndex(FULL_TABLE_NAME), AccessDeniedException.class, regularUser2);
+        verifyDenied(readMultiTenantTableWithoutIndex(fullTableName), AccessDeniedException.class, regularUser2);
 
         // Grant perms to base table (Should propagate to View Index as well)
-        verifyAllowed(grantPermissions("RX", regularUser2, FULL_TABLE_NAME, false), regularUser1);
+        verifyAllowed(grantPermissions("RX", regularUser2, fullTableName, false), regularUser1);
         // Try reading full table
-        verifyAllowed(readMultiTenantTableWithoutIndex(FULL_TABLE_NAME), regularUser2);
+        verifyAllowed(readMultiTenantTableWithoutIndex(fullTableName), regularUser2);
 
         // Create tenant specific views on the table using tenant specific Phoenix Connection
-        verifyAllowed(createView(VIEW1_TABLE_NAME, FULL_TABLE_NAME, "o1"), regularUser1);
-        verifyAllowed(createView(VIEW2_TABLE_NAME, FULL_TABLE_NAME, "o2"), regularUser1);
+        verifyAllowed(createView(view1TableName, fullTableName, "o1"), regularUser1);
+        verifyAllowed(createView(view2TableName, fullTableName, "o2"), regularUser1);
 
         // Create indexes on those views using tenant specific Phoenix Connection
         // It is not possible to create indexes on tenant specific views without tenant connection
-        verifyAllowed(createIndex(IDX1_TABLE_NAME, VIEW1_TABLE_NAME, "o1"), regularUser1);
-        verifyAllowed(createIndex(IDX2_TABLE_NAME, VIEW2_TABLE_NAME, "o2"), regularUser1);
+        verifyAllowed(createIndex(idx1TableName, view1TableName, "o1"), regularUser1);
+        verifyAllowed(createIndex(idx2TableName, view2TableName, "o2"), regularUser1);
 
         // Read the tables as regularUser2, with and without the use of Index table
         // If perms are propagated correctly, then both of them should work
         // The test checks if the query plan uses the index table by searching for "_IDX_" string
         // _IDX_ is the prefix used with base table name to derieve the name of view index table
-        verifyAllowed(readMultiTenantTableWithIndex(VIEW1_TABLE_NAME, "o1"), regularUser2);
-        verifyAllowed(readMultiTenantTableWithoutIndex(VIEW2_TABLE_NAME, "o2"), regularUser2);
+        verifyAllowed(readMultiTenantTableWithIndex(view1TableName, "o1"), regularUser2);
+        verifyAllowed(readMultiTenantTableWithoutIndex(view2TableName, "o2"), regularUser2);
     }
 
     /**
@@ -276,18 +274,16 @@ public class ChangePermissionsIT extends BasePermissionsIT {
      */
     @Test
     public void testCreateViewOnTableWithRXPermsOnSchema() throws Exception {
-
-        startNewMiniCluster();
         grantSystemTableAccess(superUser1, regularUser1, regularUser2, regularUser3);
 
         if(isNamespaceMapped) {
-            verifyAllowed(createSchema(SCHEMA_NAME), superUser1);
-            verifyAllowed(createTable(FULL_TABLE_NAME), superUser1);
-            verifyAllowed(grantPermissions("RX", regularUser1, SCHEMA_NAME, true), superUser1);
+            verifyAllowed(createSchema(schemaName), superUser1);
+            verifyAllowed(createTable(fullTableName), superUser1);
+            verifyAllowed(grantPermissions("RX", regularUser1, schemaName, true), superUser1);
         } else {
-            verifyAllowed(createTable(FULL_TABLE_NAME), superUser1);
+            verifyAllowed(createTable(fullTableName), superUser1);
             verifyAllowed(grantPermissions("RX", regularUser1, surroundWithDoubleQuotes(QueryConstants.HBASE_DEFAULT_SCHEMA_NAME), true), superUser1);
-        } 
-        verifyAllowed(createView(VIEW1_TABLE_NAME, FULL_TABLE_NAME), regularUser1);
+        }
+        verifyAllowed(createView(view1TableName, fullTableName), regularUser1);
     }
 }
diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/SystemTablePermissionsIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/SystemTablePermissionsIT.java
index 6da970b99..fb2dfc943 100644
--- a/phoenix-core/src/it/java/org/apache/phoenix/end2end/SystemTablePermissionsIT.java
+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/SystemTablePermissionsIT.java
@@ -29,35 +29,28 @@ import java.util.Set;
 
 import org.apache.hadoop.hbase.security.access.Permission.Action;
 import org.apache.phoenix.coprocessor.MetaDataProtocol;
-import org.apache.phoenix.jdbc.PhoenixConnection;
 import org.apache.phoenix.query.QueryServices;
 import org.apache.phoenix.schema.NewerSchemaAlreadyExistsException;
-import org.apache.phoenix.schema.NewerTableAlreadyExistsException;
 import org.apache.phoenix.util.PhoenixRuntime;
 import org.junit.Test;
-import org.junit.experimental.categories.Category;
 
 /**
  * Test that verifies a user can read Phoenix tables with a minimal set of permissions.
  * Uses HBase API directly to grant/revoke permissions
  */
-@Category(NeedsOwnMiniClusterTest.class)
 public class SystemTablePermissionsIT extends BasePermissionsIT {
 
-    private static final String TABLE_NAME =
-        SystemTablePermissionsIT.class.getSimpleName().toUpperCase();
+    private String tableName;
 
     public SystemTablePermissionsIT(boolean isNamespaceMapped) throws Exception {
         super(isNamespaceMapped);
+        tableName = generateUniqueName();
     }
 
     @Test
     public void testSystemTablePermissions() throws Throwable {
-
-        startNewMiniCluster();
-
-        verifyAllowed(createTable(TABLE_NAME), superUser1);
-        verifyAllowed(readTable(TABLE_NAME), superUser1);
+        verifyAllowed(createTable(tableName), superUser1);
+        verifyAllowed(readTable(tableName), superUser1);
 
         Set<String> tables = getHBaseTables();
         if(isNamespaceMapped) {
@@ -81,7 +74,7 @@ public class SystemTablePermissionsIT extends BasePermissionsIT {
                                 Action.EXEC, Action.READ);
                     }
                     grantPermissions(regularUser1.getShortName(),
-                        Collections.singleton(TABLE_NAME), Action.READ,Action.EXEC);
+                        Collections.singleton(tableName), Action.READ,Action.EXEC);
                 } catch (Throwable e) {
                     if (e instanceof Exception) {
                         throw (Exception) e;
@@ -94,7 +87,7 @@ public class SystemTablePermissionsIT extends BasePermissionsIT {
         });
 
         // Make sure that the unprivileged user can now read the table
-        verifyAllowed(readTable(TABLE_NAME), regularUser1);
+        verifyAllowed(readTable(tableName), regularUser1);
         //This verification is added to test PHOENIX-5178
         superUser1.runAs(new PrivilegedExceptionAction<Void>() {
             @Override public Void run() throws Exception {
diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/TableDDLPermissionsIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/TableDDLPermissionsIT.java
index 37073c393..45f828260 100644
--- a/phoenix-core/src/it/java/org/apache/phoenix/end2end/TableDDLPermissionsIT.java
+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/TableDDLPermissionsIT.java
@@ -35,7 +35,6 @@ import org.junit.runners.Parameterized;
 /**
  * Test that verifies a user can read Phoenix tables with a minimal set of permissions.
  */
-@Category(NeedsOwnMiniClusterTest.class)
 @RunWith(Parameterized.class)
 public class TableDDLPermissionsIT extends BasePermissionsIT{
 
@@ -44,7 +43,6 @@ public class TableDDLPermissionsIT extends BasePermissionsIT{
     }
     
     private void grantSystemTableAccess() throws Exception{
-        
         try (Connection conn = getConnection()) {
             if (isNamespaceMapped) {
                 grantPermissions(regularUser1.getShortName(), PHOENIX_NAMESPACE_MAPPED_SYSTEM_TABLES, Action.READ,
@@ -88,10 +86,8 @@ public class TableDDLPermissionsIT extends BasePermissionsIT{
 
     @Test
     public void testSchemaPermissions() throws Throwable{
-
         if (!isNamespaceMapped) { return; }
         try {
-            startNewMiniCluster();
             grantSystemTableAccess();
             final String schemaName = "TEST_SCHEMA_PERMISSION";
             superUser1.runAs(new PrivilegedExceptionAction<Void>() {
@@ -123,7 +119,6 @@ public class TableDDLPermissionsIT extends BasePermissionsIT{
 
     @Test
     public void testAutomaticGrantWithIndexAndView() throws Throwable {
-        startNewMiniCluster();
         final String schema = "TEST_INDEX_VIEW";
         final String tableName = "TABLE_DDL_PERMISSION_IT";
         final String phoenixTableName = schema + "." + tableName;
-- 
2.15.1

