diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/BasePermissionsIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/BasePermissionsIT.java
index 81a68b455..91c68e769 100644
--- a/phoenix-core/src/it/java/org/apache/phoenix/end2end/BasePermissionsIT.java
+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/BasePermissionsIT.java
@@ -16,37 +16,16 @@
  */
 package org.apache.phoenix.end2end;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-import java.io.IOException;
-import java.lang.reflect.UndeclaredThrowableException;
-import java.security.PrivilegedExceptionAction;
-import java.sql.Connection;
-import java.sql.DriverManager;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.sql.Statement;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Properties;
-import java.util.Set;
-
+import com.google.common.base.Joiner;
+import com.google.common.base.Throwables;
+import com.google.common.collect.Maps;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.AuthUtil;
-import org.apache.hadoop.hbase.HBaseTestingUtility;
-import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.LocalHBaseCluster;
 import org.apache.hadoop.hbase.TableName;
+import org.apache.hadoop.hbase.regionserver.wal.WALRecoveryRegionPostOpenIT;
 import org.apache.hadoop.hbase.security.AccessDeniedException;
 import org.apache.hadoop.hbase.security.User;
 import org.apache.hadoop.hbase.security.access.AccessControlClient;
@@ -58,22 +37,40 @@ import org.apache.phoenix.query.BaseTest;
 import org.apache.phoenix.query.QueryConstants;
 import org.apache.phoenix.query.QueryServices;
 import org.apache.phoenix.util.PhoenixRuntime;
-import org.junit.After;
+import org.apache.phoenix.util.ReadOnlyProps;
 import org.junit.BeforeClass;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
+import org.junit.experimental.categories.Category;
 
-import com.google.common.base.Joiner;
-import com.google.common.base.Throwables;
+import java.io.IOException;
+import java.lang.reflect.UndeclaredThrowableException;
+import java.security.PrivilegedExceptionAction;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+import java.util.Set;
 
-@RunWith(Parameterized.class)
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
+
+@Category(NeedsOwnMiniClusterTest.class)
 public class BasePermissionsIT extends BaseTest {
 
     private static final Log LOG = LogFactory.getLog(BasePermissionsIT.class);
 
     static String SUPERUSER;
 
-    static HBaseTestingUtility testUtil;
     static final Set<String> PHOENIX_SYSTEM_TABLES =
             new HashSet<>(Arrays.asList("SYSTEM.CATALOG", "SYSTEM.SEQUENCE", "SYSTEM.STATS",
                 "SYSTEM.FUNCTION", "SYSTEM.MUTEX"));
@@ -121,35 +118,30 @@ public class BasePermissionsIT extends BaseTest {
 
     public BasePermissionsIT(final boolean isNamespaceMapped) throws Exception {
         this.isNamespaceMapped = isNamespaceMapped;
+        initializeUsers(getUtility().getConfiguration());
+        grantSystemTableAccess();
     }
 
     @BeforeClass
     public static void doSetup() throws Exception {
         SUPERUSER = System.getProperty("user.name");
-    }
-
-    void startNewMiniCluster() throws Exception {
-        startNewMiniCluster(new Configuration());
-    }
-    
-    void startNewMiniCluster(Configuration overrideConf) throws Exception{
-        if (null != testUtil) {
-            testUtil.shutdownMiniCluster();
-            testUtil = null;
-        }
 
-        testUtil = new HBaseTestingUtility();
+        Map<String, String> serverProps = Maps.newHashMapWithExpectedSize(10);
+        serverProps.put("hbase.coprocessor.region.classes", WALRecoveryRegionPostOpenIT.IndexTableFailingRegionObserver.class.getName());
+        serverProps.put("hbase.superuser", SUPERUSER + "," + "superUser2");
+        serverProps.put("hbase.security.authorization", Boolean.TRUE.toString());
+        serverProps.put("hbase.security.exec.permission.checks", Boolean.TRUE.toString());
+        serverProps.put("hbase.coprocessor.master.classes", "org.apache.hadoop.hbase.security.access.AccessController");
+        serverProps.put("hbase.coprocessor.region.classes", "org.apache.hadoop.hbase.security.access.AccessController");
+        serverProps.put("hbase.coprocessor.regionserver.classes", "org.apache.hadoop.hbase.security.access.AccessController");
+        serverProps.put(QueryServices.PHOENIX_ACLS_ENABLED,"true");
+        serverProps.put("hbase.regionserver.wal.codec", "org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec");
+        serverProps.put(QueryServices.IS_NAMESPACE_MAPPING_ENABLED, Boolean.toString(true));
+        serverProps.put(LocalHBaseCluster.ASSIGN_RANDOM_PORTS, "true");
 
-        Configuration config = testUtil.getConfiguration();
-        enablePhoenixHBaseAuthorization(config);
-        configureNamespacesOnServer(config);
-        config.setBoolean(LocalHBaseCluster.ASSIGN_RANDOM_PORTS, true);
-        if (overrideConf != null) {
-            config.addResource(overrideConf);
-        }
-
-        testUtil.startMiniCluster(1);
-        initializeUsers(testUtil.getConfiguration());
+        Map<String, String> clientProps = Collections.singletonMap(QueryServices.IS_NAMESPACE_MAPPING_ENABLED, Boolean.toString(true));
+        NUM_SLAVES_BASE = 1;
+        setUpTestDriver(new ReadOnlyProps(serverProps.entrySet().iterator()), new ReadOnlyProps(clientProps.entrySet().iterator()));
     }
 
     private void initializeUsers(Configuration configuration) {
@@ -162,52 +154,57 @@ public class BasePermissionsIT extends BaseTest {
         regularUser3 = User.createUserForTesting(configuration, "regularUser3", new String[0]);
         regularUser4 = User.createUserForTesting(configuration, "regularUser4", new String[0]);
 
-        groupUser = User.createUserForTesting(testUtil.getConfiguration(), "groupUser", new String[] {GROUP_SYSTEM_ACCESS});
+        groupUser = User.createUserForTesting(getUtility().getConfiguration(), "groupUser", new String[] {GROUP_SYSTEM_ACCESS});
 
         unprivilegedUser = User.createUserForTesting(configuration, "unprivilegedUser", new String[0]);
     }
 
-    private void configureRandomHMasterPort(Configuration config) {
-        // Avoid multiple clusters trying to bind the master's info port (16010)
-        config.setInt(HConstants.MASTER_INFO_PORT, 0);
-    }
-
-    void enablePhoenixHBaseAuthorization(Configuration config) {
-        config.set("hbase.superuser", SUPERUSER + "," + "superUser2");
-        config.set("hbase.security.authorization", Boolean.TRUE.toString());
-        config.set("hbase.security.exec.permission.checks", Boolean.TRUE.toString());
-        config.set("hbase.coprocessor.master.classes",
-                "org.apache.hadoop.hbase.security.access.AccessController");
-        config.set("hbase.coprocessor.region.classes",
-                "org.apache.hadoop.hbase.security.access.AccessController");
-        config.set("hbase.coprocessor.regionserver.classes",
-                "org.apache.hadoop.hbase.security.access.AccessController");
-
-        config.set(QueryServices.PHOENIX_ACLS_ENABLED,"true");
-
-        config.set("hbase.regionserver.wal.codec", "org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec");
-    }
-
-    void configureNamespacesOnServer(Configuration conf) {
-        conf.set(QueryServices.IS_NAMESPACE_MAPPING_ENABLED, Boolean.toString(isNamespaceMapped));
-    }
-
-    @Parameterized.Parameters(name = "isNamespaceMapped={0}") // name is used by failsafe as file name in reports
-    public static Collection<Boolean> data() {
-        return Arrays.asList(false, true);
-    }
-
-    @After
-    public void cleanup() throws Exception {
-        if (testUtil != null) {
-            testUtil.shutdownMiniCluster();
-            testUtil = null;
+    protected void grantSystemTableAccess() throws Exception{
+        try (Connection conn = getConnection()) {
+            if (isNamespaceMapped) {
+                grantPermissions(regularUser1.getShortName(), PHOENIX_NAMESPACE_MAPPED_SYSTEM_TABLES, Permission.Action.READ,
+                        Permission.Action.EXEC);
+                grantPermissions(unprivilegedUser.getShortName(), PHOENIX_NAMESPACE_MAPPED_SYSTEM_TABLES,
+                        Permission.Action.READ, Permission.Action.EXEC);
+                grantPermissions(AuthUtil.toGroupEntry(GROUP_SYSTEM_ACCESS), PHOENIX_NAMESPACE_MAPPED_SYSTEM_TABLES,
+                        Permission.Action.READ, Permission.Action.EXEC);
+                // Local Index requires WRITE permission on SYSTEM.SEQUENCE TABLE.
+                grantPermissions(regularUser1.getName(), Collections.singleton("SYSTEM:SEQUENCE"), Permission.Action.WRITE,
+                        Permission.Action.READ, Permission.Action.EXEC);
+                grantPermissions(unprivilegedUser.getName(), Collections.singleton("SYSTEM:SEQUENCE"), Permission.Action.WRITE,
+                        Permission.Action.READ, Permission.Action.EXEC);
+                grantPermissions(regularUser1.getShortName(), Collections.singleton("SYSTEM:MUTEX"), Permission.Action.WRITE,
+                        Permission.Action.READ, Permission.Action.EXEC);
+                grantPermissions(unprivilegedUser.getShortName(), Collections.singleton("SYSTEM:MUTEX"), Permission.Action.WRITE,
+                        Permission.Action.READ, Permission.Action.EXEC);
+
+            } else {
+                grantPermissions(regularUser1.getName(), PHOENIX_SYSTEM_TABLES, Permission.Action.READ, Permission.Action.EXEC);
+                grantPermissions(unprivilegedUser.getName(), PHOENIX_SYSTEM_TABLES, Permission.Action.READ, Permission.Action.EXEC);
+                grantPermissions(AuthUtil.toGroupEntry(GROUP_SYSTEM_ACCESS), PHOENIX_SYSTEM_TABLES, Permission.Action.READ, Permission.Action.EXEC);
+                // Local Index requires WRITE permission on SYSTEM.SEQUENCE TABLE.
+                grantPermissions(regularUser1.getName(), Collections.singleton("SYSTEM.SEQUENCE"), Permission.Action.WRITE,
+                        Permission.Action.READ, Permission.Action.EXEC);
+                grantPermissions(unprivilegedUser.getName(), Collections.singleton("SYSTEM:SEQUENCE"), Permission.Action.WRITE,
+                        Permission.Action.READ, Permission.Action.EXEC);
+                grantPermissions(regularUser1.getShortName(), Collections.singleton("SYSTEM.MUTEX"), Permission.Action.WRITE,
+                        Permission.Action.READ, Permission.Action.EXEC);
+                grantPermissions(unprivilegedUser.getShortName(), Collections.singleton("SYSTEM.MUTEX"), Permission.Action.WRITE,
+                        Permission.Action.READ, Permission.Action.EXEC);
+            }
+        } catch (Throwable e) {
+            if (e instanceof Exception) {
+                throw (Exception)e;
+            } else {
+                throw new Exception(e);
+            }
         }
     }
 
-    public static HBaseTestingUtility getUtility(){
-        return testUtil;
-    }
+//    @Parameterized.Parameters(name = "isNamespaceMapped={0}") // name is used by failsafe as file name in reports
+//    public static Collection<Boolean> data() {
+//        return Arrays.asList(false, true);
+//    }
 
     // Utility functions to grant permissions with HBase API
     void grantPermissions(String toUser, Set<String> tablesToGrant, Permission.Action... actions) throws Throwable {
@@ -249,13 +246,9 @@ public class BasePermissionsIT extends BaseTest {
         return DriverManager.getConnection(getUrl(), getClientProperties(tenantId));
     }
 
-    protected static String getUrl() {
-        return "jdbc:phoenix:localhost:" + testUtil.getZkCluster().getClientPort() + ":/hbase";
-    }
-
     static Set<String> getHBaseTables() throws IOException {
         Set<String> tables = new HashSet<>();
-        for (TableName tn : testUtil.getHBaseAdmin().listTableNames()) {
+        for (TableName tn : getUtility().getHBaseAdmin().listTableNames()) {
             tables.add(tn.getNameAsString());
         }
         return tables;
diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/ChangePermissionsIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/ChangePermissionsIT.java
index 65f44c04f..f4637d07a 100644
--- a/phoenix-core/src/it/java/org/apache/phoenix/end2end/ChangePermissionsIT.java
+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/ChangePermissionsIT.java
@@ -23,31 +23,36 @@ import org.apache.hadoop.hbase.security.User;
 import org.apache.phoenix.jdbc.PhoenixDatabaseMetaData;
 import org.apache.phoenix.query.QueryConstants;
 import org.apache.phoenix.schema.TableNotFoundException;
-import org.apache.phoenix.util.SchemaUtil;
 import org.junit.Test;
-import org.junit.experimental.categories.Category;
 
 /**
  * Test that verifies a user can read Phoenix tables with a minimal set of permissions.
  */
-@Category(NeedsOwnMiniClusterTest.class)
-public class ChangePermissionsIT extends BasePermissionsIT {
+public abstract class ChangePermissionsIT extends BasePermissionsIT {
 
     private static final Log LOG = LogFactory.getLog(ChangePermissionsIT.class);
 
-    private static final String SCHEMA_NAME = "CHANGEPERMSSCHEMA";
-    private static final String TABLE_NAME =
-            ChangePermissionsIT.class.getSimpleName().toUpperCase();
-    private static final String FULL_TABLE_NAME = SCHEMA_NAME + "." + TABLE_NAME;
-    private static final String IDX1_TABLE_NAME = TABLE_NAME + "_IDX1";
-    private static final String IDX2_TABLE_NAME = TABLE_NAME + "_IDX2";
-    private static final String IDX3_TABLE_NAME = TABLE_NAME + "_IDX3";
-    private static final String LOCAL_IDX1_TABLE_NAME = TABLE_NAME + "_LIDX1";
-    private static final String VIEW1_TABLE_NAME = TABLE_NAME + "_V1";
-    private static final String VIEW2_TABLE_NAME = TABLE_NAME + "_V2";
+    private final String schemaName;
+    private final String tableName;
+    private final String fullTableName;
+    private final String idx1TableName;
+    private final String idx2TableName;
+    private final String idx3TableName;
+    private final String localIdx1TableName;
+    private final String view1TableName;
+    private final String view2TableName;
 
     public ChangePermissionsIT(boolean isNamespaceMapped) throws Exception {
         super(isNamespaceMapped);
+        this.schemaName = generateUniqueName();
+        this.tableName = generateUniqueName();
+        this.fullTableName = schemaName + "." + tableName;
+        this.idx1TableName = tableName + "_IDX1";
+        this.idx2TableName = tableName + "_IDX2";
+        this.idx3TableName = tableName + "_IDX3";
+        this.localIdx1TableName = tableName + "_LIDX1";
+        this.view1TableName = tableName + "_V1";
+        this.view2TableName = tableName + "_V2";
     }
 
     private void grantSystemTableAccess(User superUser, User... users) throws Exception {
@@ -80,9 +85,6 @@ public class ChangePermissionsIT extends BasePermissionsIT {
      */
     @Test
     public void testRXPermsReqdForPhoenixConn() throws Exception {
-
-        startNewMiniCluster();
-
         if(isNamespaceMapped) {
             // NS is enabled, CQSI tries creating SYSCAT, we get NamespaceNotFoundException exception for "SYSTEM" NS
             // We create custom ADE and throw it (and ignore NamespaceNotFoundException)
@@ -112,9 +114,6 @@ public class ChangePermissionsIT extends BasePermissionsIT {
      */
     @Test
     public void testSuperUserCanChangePerms() throws Exception {
-
-        startNewMiniCluster();
-
         // Grant System Table access to all users, else they can't create a Phoenix connection
         grantSystemTableAccess(superUser1, regularUser1, regularUser2, unprivilegedUser);
 
@@ -137,59 +136,56 @@ public class ChangePermissionsIT extends BasePermissionsIT {
      */
     @Test
     public void testReadPermsOnTableIndexAndView() throws Exception {
-
-        startNewMiniCluster();
-
         grantSystemTableAccess(superUser1, regularUser1, regularUser2, unprivilegedUser);
 
         // Create new schema and grant CREATE permissions to a user
         if(isNamespaceMapped) {
-            verifyAllowed(createSchema(SCHEMA_NAME), superUser1);
-            verifyAllowed(grantPermissions("C", regularUser1, SCHEMA_NAME, true), superUser1);
+            verifyAllowed(createSchema(schemaName), superUser1);
+            verifyAllowed(grantPermissions("C", regularUser1, schemaName, true), superUser1);
         } else {
             verifyAllowed(grantPermissions("C", regularUser1, surroundWithDoubleQuotes(QueryConstants.HBASE_DEFAULT_SCHEMA_NAME), true), superUser1);
         }
 
         // Create new table. Create indexes, views and view indexes on top of it. Verify the contents by querying it
-        verifyAllowed(createTable(FULL_TABLE_NAME), regularUser1);
-        verifyAllowed(readTable(FULL_TABLE_NAME), regularUser1);
-        verifyAllowed(createIndex(IDX1_TABLE_NAME, FULL_TABLE_NAME), regularUser1);
-        verifyAllowed(createIndex(IDX2_TABLE_NAME, FULL_TABLE_NAME), regularUser1);
-        verifyAllowed(createLocalIndex(LOCAL_IDX1_TABLE_NAME, FULL_TABLE_NAME), regularUser1);
-        verifyAllowed(createView(VIEW1_TABLE_NAME, FULL_TABLE_NAME), regularUser1);
-        verifyAllowed(createIndex(IDX3_TABLE_NAME, VIEW1_TABLE_NAME), regularUser1);
+        verifyAllowed(createTable(fullTableName), regularUser1);
+        verifyAllowed(readTable(fullTableName), regularUser1);
+        verifyAllowed(createIndex(idx1TableName, fullTableName), regularUser1);
+        verifyAllowed(createIndex(idx2TableName, fullTableName), regularUser1);
+        verifyAllowed(createLocalIndex(localIdx1TableName, fullTableName), regularUser1);
+        verifyAllowed(createView(view1TableName, fullTableName), regularUser1);
+        verifyAllowed(createIndex(idx3TableName, view1TableName), regularUser1);
 
         // RegularUser2 doesn't have any permissions. It can get a PhoenixConnection
         // However it cannot query table, indexes or views without READ perms
         verifyAllowed(getConnectionAction(), regularUser2);
-        verifyDenied(readTable(FULL_TABLE_NAME), AccessDeniedException.class, regularUser2);
-        verifyDenied(readTable(FULL_TABLE_NAME, IDX1_TABLE_NAME), AccessDeniedException.class, regularUser2);
-        verifyDenied(readTable(VIEW1_TABLE_NAME), AccessDeniedException.class, regularUser2);
-        verifyDenied(readTableWithoutVerification(SCHEMA_NAME + "." + IDX1_TABLE_NAME), AccessDeniedException.class, regularUser2);
+        verifyDenied(readTable(fullTableName), AccessDeniedException.class, regularUser2);
+        verifyDenied(readTable(fullTableName, idx1TableName), AccessDeniedException.class, regularUser2);
+        verifyDenied(readTable(view1TableName), AccessDeniedException.class, regularUser2);
+        verifyDenied(readTableWithoutVerification(schemaName + "." + idx1TableName), AccessDeniedException.class, regularUser2);
 
         // Grant READ permissions to RegularUser2 on the table
         // Permissions should propagate automatically to relevant physical tables such as global index and view index.
-        verifyAllowed(grantPermissions("RX", regularUser2, FULL_TABLE_NAME, false), regularUser1);
+        verifyAllowed(grantPermissions("RX", regularUser2, fullTableName, false), regularUser1);
         // Granting permissions directly to index tables should fail
-        verifyDenied(grantPermissions("W", regularUser2, SCHEMA_NAME + "." + IDX1_TABLE_NAME, false), AccessDeniedException.class, regularUser1);
+        verifyDenied(grantPermissions("W", regularUser2, schemaName + "." + idx1TableName, false), AccessDeniedException.class, regularUser1);
         // Granting permissions directly to views should fail. We expect TableNotFoundException since VIEWS are not physical tables
-        verifyDenied(grantPermissions("W", regularUser2, SCHEMA_NAME + "." + VIEW1_TABLE_NAME, false), TableNotFoundException.class, regularUser1);
+        verifyDenied(grantPermissions("W", regularUser2, schemaName + "." + view1TableName, false), TableNotFoundException.class, regularUser1);
 
         // Verify that all other access are successful now
-        verifyAllowed(readTable(FULL_TABLE_NAME), regularUser2);
-        verifyAllowed(readTable(FULL_TABLE_NAME, IDX1_TABLE_NAME), regularUser2);
-        verifyAllowed(readTable(FULL_TABLE_NAME, IDX2_TABLE_NAME), regularUser2);
-        verifyAllowed(readTable(FULL_TABLE_NAME, LOCAL_IDX1_TABLE_NAME), regularUser2);
-        verifyAllowed(readTableWithoutVerification(SCHEMA_NAME + "." + IDX1_TABLE_NAME), regularUser2);
-        verifyAllowed(readTable(VIEW1_TABLE_NAME), regularUser2);
-        verifyAllowed(readMultiTenantTableWithIndex(VIEW1_TABLE_NAME), regularUser2);
+        verifyAllowed(readTable(fullTableName), regularUser2);
+        verifyAllowed(readTable(fullTableName, idx1TableName), regularUser2);
+        verifyAllowed(readTable(fullTableName, idx2TableName), regularUser2);
+        verifyAllowed(readTable(fullTableName, localIdx1TableName), regularUser2);
+        verifyAllowed(readTableWithoutVerification(schemaName + "." + idx1TableName), regularUser2);
+        verifyAllowed(readTable(view1TableName), regularUser2);
+        verifyAllowed(readMultiTenantTableWithIndex(view1TableName), regularUser2);
 
         // Revoke READ permissions to RegularUser2 on the table
         // Permissions should propagate automatically to relevant physical tables such as global index and view index.
-        verifyAllowed(revokePermissions(regularUser2, FULL_TABLE_NAME, false), regularUser1);
+        verifyAllowed(revokePermissions(regularUser2, fullTableName, false), regularUser1);
         // READ query should fail now
-        verifyDenied(readTable(FULL_TABLE_NAME), AccessDeniedException.class, regularUser2);
-        verifyDenied(readTableWithoutVerification(SCHEMA_NAME + "." + IDX1_TABLE_NAME), AccessDeniedException.class, regularUser2);
+        verifyDenied(readTable(fullTableName), AccessDeniedException.class, regularUser2);
+        verifyDenied(readTableWithoutVerification(schemaName + "." + idx1TableName), AccessDeniedException.class, regularUser2);
 
     }
 
@@ -198,30 +194,27 @@ public class ChangePermissionsIT extends BasePermissionsIT {
      */
     @Test
     public void testGroupUserPerms() throws Exception {
-
-        startNewMiniCluster();
-
         if(isNamespaceMapped) {
-            verifyAllowed(createSchema(SCHEMA_NAME), superUser1);
+            verifyAllowed(createSchema(schemaName), superUser1);
         }
-        verifyAllowed(createTable(FULL_TABLE_NAME), superUser1);
+        verifyAllowed(createTable(fullTableName), superUser1);
 
         // Grant SYSTEM table access to GROUP_SYSTEM_ACCESS and regularUser1
         verifyAllowed(grantPermissions("RX", GROUP_SYSTEM_ACCESS, PHOENIX_SYSTEM_TABLES_IDENTIFIERS, false), superUser1);
         grantSystemTableAccess(superUser1, regularUser1);
 
         // Grant Permissions to Groups (Should be automatically applicable to all users inside it)
-        verifyAllowed(grantPermissions("ARX", GROUP_SYSTEM_ACCESS, FULL_TABLE_NAME, false), superUser1);
-        verifyAllowed(readTable(FULL_TABLE_NAME), groupUser);
+        verifyAllowed(grantPermissions("ARX", GROUP_SYSTEM_ACCESS, fullTableName, false), superUser1);
+        verifyAllowed(readTable(fullTableName), groupUser);
 
         // GroupUser is an admin and can grant perms to other users
-        verifyDenied(readTable(FULL_TABLE_NAME), AccessDeniedException.class, regularUser1);
-        verifyAllowed(grantPermissions("RX", regularUser1, FULL_TABLE_NAME, false), groupUser);
-        verifyAllowed(readTable(FULL_TABLE_NAME), regularUser1);
+        verifyDenied(readTable(fullTableName), AccessDeniedException.class, regularUser1);
+        verifyAllowed(grantPermissions("RX", regularUser1, fullTableName, false), groupUser);
+        verifyAllowed(readTable(fullTableName), regularUser1);
 
         // Revoke the perms and try accessing data again
-        verifyAllowed(revokePermissions(GROUP_SYSTEM_ACCESS, FULL_TABLE_NAME, false), superUser1);
-        verifyDenied(readTable(FULL_TABLE_NAME), AccessDeniedException.class, groupUser);
+        verifyAllowed(revokePermissions(GROUP_SYSTEM_ACCESS, fullTableName, false), superUser1);
+        verifyDenied(readTable(fullTableName), AccessDeniedException.class, groupUser);
     }
 
     /**
@@ -229,45 +222,42 @@ public class ChangePermissionsIT extends BasePermissionsIT {
      */
     @Test
     public void testMultiTenantTables() throws Exception {
-
-        startNewMiniCluster();
-
         grantSystemTableAccess(superUser1, regularUser1, regularUser2, regularUser3);
 
         if(isNamespaceMapped) {
-            verifyAllowed(createSchema(SCHEMA_NAME), superUser1);
-            verifyAllowed(grantPermissions("C", regularUser1, SCHEMA_NAME, true), superUser1);
+            verifyAllowed(createSchema(schemaName), superUser1);
+            verifyAllowed(grantPermissions("C", regularUser1, schemaName, true), superUser1);
         } else {
             verifyAllowed(grantPermissions("C", regularUser1, surroundWithDoubleQuotes(QueryConstants.HBASE_DEFAULT_SCHEMA_NAME), true), superUser1);
         }
 
         // Create MultiTenant Table (View Index Table should be automatically created)
         // At this point, the index table doesn't contain any data
-        verifyAllowed(createMultiTenantTable(FULL_TABLE_NAME), regularUser1);
+        verifyAllowed(createMultiTenantTable(fullTableName), regularUser1);
 
         // RegularUser2 doesn't have access yet, RegularUser1 should have RWXCA on the table
-        verifyDenied(readMultiTenantTableWithoutIndex(FULL_TABLE_NAME), AccessDeniedException.class, regularUser2);
+        verifyDenied(readMultiTenantTableWithoutIndex(fullTableName), AccessDeniedException.class, regularUser2);
 
         // Grant perms to base table (Should propagate to View Index as well)
-        verifyAllowed(grantPermissions("RX", regularUser2, FULL_TABLE_NAME, false), regularUser1);
+        verifyAllowed(grantPermissions("RX", regularUser2, fullTableName, false), regularUser1);
         // Try reading full table
-        verifyAllowed(readMultiTenantTableWithoutIndex(FULL_TABLE_NAME), regularUser2);
+        verifyAllowed(readMultiTenantTableWithoutIndex(fullTableName), regularUser2);
 
         // Create tenant specific views on the table using tenant specific Phoenix Connection
-        verifyAllowed(createView(VIEW1_TABLE_NAME, FULL_TABLE_NAME, "o1"), regularUser1);
-        verifyAllowed(createView(VIEW2_TABLE_NAME, FULL_TABLE_NAME, "o2"), regularUser1);
+        verifyAllowed(createView(view1TableName, fullTableName, "o1"), regularUser1);
+        verifyAllowed(createView(view2TableName, fullTableName, "o2"), regularUser1);
 
         // Create indexes on those views using tenant specific Phoenix Connection
         // It is not possible to create indexes on tenant specific views without tenant connection
-        verifyAllowed(createIndex(IDX1_TABLE_NAME, VIEW1_TABLE_NAME, "o1"), regularUser1);
-        verifyAllowed(createIndex(IDX2_TABLE_NAME, VIEW2_TABLE_NAME, "o2"), regularUser1);
+        verifyAllowed(createIndex(idx1TableName, view1TableName, "o1"), regularUser1);
+        verifyAllowed(createIndex(idx2TableName, view2TableName, "o2"), regularUser1);
 
         // Read the tables as regularUser2, with and without the use of Index table
         // If perms are propagated correctly, then both of them should work
         // The test checks if the query plan uses the index table by searching for "_IDX_" string
         // _IDX_ is the prefix used with base table name to derieve the name of view index table
-        verifyAllowed(readMultiTenantTableWithIndex(VIEW1_TABLE_NAME, "o1"), regularUser2);
-        verifyAllowed(readMultiTenantTableWithoutIndex(VIEW2_TABLE_NAME, "o2"), regularUser2);
+        verifyAllowed(readMultiTenantTableWithIndex(view1TableName, "o1"), regularUser2);
+        verifyAllowed(readMultiTenantTableWithoutIndex(view2TableName, "o2"), regularUser2);
     }
 
     /**
@@ -276,18 +266,16 @@ public class ChangePermissionsIT extends BasePermissionsIT {
      */
     @Test
     public void testCreateViewOnTableWithRXPermsOnSchema() throws Exception {
-
-        startNewMiniCluster();
         grantSystemTableAccess(superUser1, regularUser1, regularUser2, regularUser3);
 
         if(isNamespaceMapped) {
-            verifyAllowed(createSchema(SCHEMA_NAME), superUser1);
-            verifyAllowed(createTable(FULL_TABLE_NAME), superUser1);
-            verifyAllowed(grantPermissions("RX", regularUser1, SCHEMA_NAME, true), superUser1);
+            verifyAllowed(createSchema(schemaName), superUser1);
+            verifyAllowed(createTable(fullTableName), superUser1);
+            verifyAllowed(grantPermissions("RX", regularUser1, schemaName, true), superUser1);
         } else {
-            verifyAllowed(createTable(FULL_TABLE_NAME), superUser1);
+            verifyAllowed(createTable(fullTableName), superUser1);
             verifyAllowed(grantPermissions("RX", regularUser1, surroundWithDoubleQuotes(QueryConstants.HBASE_DEFAULT_SCHEMA_NAME), true), superUser1);
         } 
-        verifyAllowed(createView(VIEW1_TABLE_NAME, FULL_TABLE_NAME), regularUser1);
+        verifyAllowed(createView(view1TableName, fullTableName), regularUser1);
     }
 }
diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/ChangePermissionsNSDisabledIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/ChangePermissionsNSDisabledIT.java
new file mode 100644
index 000000000..a7004cd31
--- /dev/null
+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/ChangePermissionsNSDisabledIT.java
@@ -0,0 +1,8 @@
+package org.apache.phoenix.end2end;
+
+public class ChangePermissionsNSDisabledIT extends ChangePermissionsIT {
+
+    public ChangePermissionsNSDisabledIT() throws Exception {
+        super(false);
+    }
+}
diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/ChangePermissionsNSEnabledIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/ChangePermissionsNSEnabledIT.java
new file mode 100644
index 000000000..4d062fafa
--- /dev/null
+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/ChangePermissionsNSEnabledIT.java
@@ -0,0 +1,9 @@
+package org.apache.phoenix.end2end;
+
+public class ChangePermissionsNSEnabledIT extends ChangePermissionsIT {
+
+    public ChangePermissionsNSEnabledIT() throws Exception {
+        super(true);
+    }
+
+}
diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/SystemTablePermissionsIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/SystemTablePermissionsIT.java
deleted file mode 100644
index 6da970b99..000000000
--- a/phoenix-core/src/it/java/org/apache/phoenix/end2end/SystemTablePermissionsIT.java
+++ /dev/null
@@ -1,131 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to you under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.phoenix.end2end;
-
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-import java.security.PrivilegedExceptionAction;
-import java.sql.Connection;
-import java.sql.DriverManager;
-import java.sql.Statement;
-import java.util.Collections;
-import java.util.Properties;
-import java.util.Set;
-
-import org.apache.hadoop.hbase.security.access.Permission.Action;
-import org.apache.phoenix.coprocessor.MetaDataProtocol;
-import org.apache.phoenix.jdbc.PhoenixConnection;
-import org.apache.phoenix.query.QueryServices;
-import org.apache.phoenix.schema.NewerSchemaAlreadyExistsException;
-import org.apache.phoenix.schema.NewerTableAlreadyExistsException;
-import org.apache.phoenix.util.PhoenixRuntime;
-import org.junit.Test;
-import org.junit.experimental.categories.Category;
-
-/**
- * Test that verifies a user can read Phoenix tables with a minimal set of permissions.
- * Uses HBase API directly to grant/revoke permissions
- */
-@Category(NeedsOwnMiniClusterTest.class)
-public class SystemTablePermissionsIT extends BasePermissionsIT {
-
-    private static final String TABLE_NAME =
-        SystemTablePermissionsIT.class.getSimpleName().toUpperCase();
-
-    public SystemTablePermissionsIT(boolean isNamespaceMapped) throws Exception {
-        super(isNamespaceMapped);
-    }
-
-    @Test
-    public void testSystemTablePermissions() throws Throwable {
-
-        startNewMiniCluster();
-
-        verifyAllowed(createTable(TABLE_NAME), superUser1);
-        verifyAllowed(readTable(TABLE_NAME), superUser1);
-
-        Set<String> tables = getHBaseTables();
-        if(isNamespaceMapped) {
-            assertTrue("HBase tables do not include expected Phoenix tables: " + tables,
-                    tables.containsAll(PHOENIX_NAMESPACE_MAPPED_SYSTEM_TABLES));
-        } else {
-            assertTrue("HBase tables do not include expected Phoenix tables: " + tables,
-                    tables.containsAll(PHOENIX_SYSTEM_TABLES));
-        }
-
-        // Grant permission to the system tables for the unprivileged user
-        superUser1.runAs(new PrivilegedExceptionAction<Void>() {
-            @Override
-            public Void run() throws Exception {
-                try {
-                    if(isNamespaceMapped) {
-                        grantPermissions(regularUser1.getShortName(),
-                                PHOENIX_NAMESPACE_MAPPED_SYSTEM_TABLES, Action.EXEC, Action.READ);
-                    } else {
-                        grantPermissions(regularUser1.getShortName(), PHOENIX_SYSTEM_TABLES,
-                                Action.EXEC, Action.READ);
-                    }
-                    grantPermissions(regularUser1.getShortName(),
-                        Collections.singleton(TABLE_NAME), Action.READ,Action.EXEC);
-                } catch (Throwable e) {
-                    if (e instanceof Exception) {
-                        throw (Exception) e;
-                    } else {
-                        throw new Exception(e);
-                    }
-                }
-                return null;
-            }
-        });
-
-        // Make sure that the unprivileged user can now read the table
-        verifyAllowed(readTable(TABLE_NAME), regularUser1);
-        //This verification is added to test PHOENIX-5178
-        superUser1.runAs(new PrivilegedExceptionAction<Void>() {
-            @Override public Void run() throws Exception {
-                try {
-                    if (isNamespaceMapped) {
-                        grantPermissions(regularUser1.getShortName(),"SYSTEM", Action.ADMIN);
-                    }
-                    return null;
-                } catch (Throwable e) {
-                    throw new Exception(e);
-                }
-
-            }
-        });
-        if(isNamespaceMapped) {
-            verifyAllowed(new AccessTestAction() {
-                @Override public Object run() throws Exception {
-                    Properties props = new Properties();
-                    props.setProperty(QueryServices.IS_NAMESPACE_MAPPING_ENABLED, Boolean.toString(isNamespaceMapped));
-                    props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(MetaDataProtocol.MIN_SYSTEM_TABLE_TIMESTAMP));
-                    //Impersonate meta connection
-                    try (Connection metaConnection = DriverManager.getConnection(getUrl(), props);
-                        Statement stmt = metaConnection.createStatement()) {
-                        stmt.executeUpdate("CREATE SCHEMA IF NOT EXISTS SYSTEM");
-                    }catch(NewerSchemaAlreadyExistsException e){
-
-                    }
-                    return null;
-                }
-            }, regularUser1);
-        }
-    }
-
-}
diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/TableDDLPermissionsIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/TableDDLPermissionsIT.java
index 37073c393..fd4243082 100644
--- a/phoenix-core/src/it/java/org/apache/phoenix/end2end/TableDDLPermissionsIT.java
+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/TableDDLPermissionsIT.java
@@ -17,115 +17,42 @@
 package org.apache.phoenix.end2end;
 
 
-import java.security.PrivilegedExceptionAction;
-import java.sql.Connection;
-import java.util.Collections;
-
 import org.apache.hadoop.hbase.AuthUtil;
 import org.apache.hadoop.hbase.NamespaceDescriptor;
 import org.apache.hadoop.hbase.security.AccessDeniedException;
 import org.apache.hadoop.hbase.security.access.AccessControlClient;
 import org.apache.hadoop.hbase.security.access.Permission.Action;
+import org.apache.phoenix.coprocessor.MetaDataProtocol;
+import org.apache.phoenix.query.QueryServices;
+import org.apache.phoenix.schema.NewerSchemaAlreadyExistsException;
+import org.apache.phoenix.util.PhoenixRuntime;
 import org.apache.phoenix.util.SchemaUtil;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
+
+import java.security.PrivilegedExceptionAction;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.Statement;
+import java.util.Collections;
+import java.util.Properties;
+import java.util.Set;
+
+import static org.junit.Assert.assertTrue;
 
 /**
  * Test that verifies a user can read Phoenix tables with a minimal set of permissions.
  */
-@Category(NeedsOwnMiniClusterTest.class)
-@RunWith(Parameterized.class)
-public class TableDDLPermissionsIT extends BasePermissionsIT{
+public abstract class TableDDLPermissionsIT extends BasePermissionsIT{
 
     public TableDDLPermissionsIT(boolean isNamespaceMapped) throws Exception {
         super(isNamespaceMapped);
     }
     
-    private void grantSystemTableAccess() throws Exception{
-        
-        try (Connection conn = getConnection()) {
-            if (isNamespaceMapped) {
-                grantPermissions(regularUser1.getShortName(), PHOENIX_NAMESPACE_MAPPED_SYSTEM_TABLES, Action.READ,
-                        Action.EXEC);
-                grantPermissions(unprivilegedUser.getShortName(), PHOENIX_NAMESPACE_MAPPED_SYSTEM_TABLES,
-                        Action.READ, Action.EXEC);
-                grantPermissions(AuthUtil.toGroupEntry(GROUP_SYSTEM_ACCESS), PHOENIX_NAMESPACE_MAPPED_SYSTEM_TABLES,
-                        Action.READ, Action.EXEC);
-                // Local Index requires WRITE permission on SYSTEM.SEQUENCE TABLE.
-                grantPermissions(regularUser1.getName(), Collections.singleton("SYSTEM:SEQUENCE"), Action.WRITE,
-                        Action.READ, Action.EXEC);
-                grantPermissions(unprivilegedUser.getName(), Collections.singleton("SYSTEM:SEQUENCE"), Action.WRITE,
-                        Action.READ, Action.EXEC);
-                grantPermissions(regularUser1.getShortName(), Collections.singleton("SYSTEM:MUTEX"), Action.WRITE,
-                    Action.READ, Action.EXEC);
-                grantPermissions(unprivilegedUser.getShortName(), Collections.singleton("SYSTEM:MUTEX"), Action.WRITE,
-                    Action.READ, Action.EXEC);
-                
-            } else {
-                grantPermissions(regularUser1.getName(), PHOENIX_SYSTEM_TABLES, Action.READ, Action.EXEC);
-                grantPermissions(unprivilegedUser.getName(), PHOENIX_SYSTEM_TABLES, Action.READ, Action.EXEC);
-                grantPermissions(AuthUtil.toGroupEntry(GROUP_SYSTEM_ACCESS), PHOENIX_SYSTEM_TABLES, Action.READ, Action.EXEC);
-                // Local Index requires WRITE permission on SYSTEM.SEQUENCE TABLE.
-                grantPermissions(regularUser1.getName(), Collections.singleton("SYSTEM.SEQUENCE"), Action.WRITE,
-                        Action.READ, Action.EXEC);
-                grantPermissions(unprivilegedUser.getName(), Collections.singleton("SYSTEM:SEQUENCE"), Action.WRITE,
-                        Action.READ, Action.EXEC);
-                grantPermissions(regularUser1.getShortName(), Collections.singleton("SYSTEM.MUTEX"), Action.WRITE,
-                    Action.READ, Action.EXEC);
-            grantPermissions(unprivilegedUser.getShortName(), Collections.singleton("SYSTEM.MUTEX"), Action.WRITE,
-                    Action.READ, Action.EXEC);
-            }
-        } catch (Throwable e) {
-            if (e instanceof Exception) {
-                throw (Exception)e;
-            } else {
-                throw new Exception(e);
-            }
-        }
-    }
-
-    @Test
-    public void testSchemaPermissions() throws Throwable{
-
-        if (!isNamespaceMapped) { return; }
-        try {
-            startNewMiniCluster();
-            grantSystemTableAccess();
-            final String schemaName = "TEST_SCHEMA_PERMISSION";
-            superUser1.runAs(new PrivilegedExceptionAction<Void>() {
-                @Override
-                public Void run() throws Exception {
-                    try {
-                        AccessControlClient.grant(getUtility().getConnection(), regularUser1.getShortName(),
-                                Action.ADMIN);
-                    } catch (Throwable e) {
-                        if (e instanceof Exception) {
-                            throw (Exception)e;
-                        } else {
-                            throw new Exception(e);
-                        }
-                    }
-                    return null;
-                }
-            });
-            verifyAllowed(createSchema(schemaName), regularUser1);
-            // Unprivileged user cannot drop a schema
-            verifyDenied(dropSchema(schemaName), AccessDeniedException.class, unprivilegedUser);
-            verifyDenied(createSchema(schemaName), AccessDeniedException.class, unprivilegedUser);
-
-            verifyAllowed(dropSchema(schemaName), regularUser1);
-        } finally {
-            revokeAll();
-        }
-    }
-
     @Test
     public void testAutomaticGrantWithIndexAndView() throws Throwable {
-        startNewMiniCluster();
-        final String schema = "TEST_INDEX_VIEW";
-        final String tableName = "TABLE_DDL_PERMISSION_IT";
+        final String schema = generateUniqueName();
+        final String tableName = generateUniqueName();
         final String phoenixTableName = schema + "." + tableName;
         final String indexName1 = tableName + "_IDX1";
         final String indexName2 = tableName + "_IDX2";
@@ -136,7 +63,6 @@ public class TableDDLPermissionsIT extends BasePermissionsIT{
         final String viewName4 = schema+"."+tableName + "_V4";
         final String viewIndexName1 = tableName + "_VIDX1";
         final String viewIndexName2 = tableName + "_VIDX2";
-        grantSystemTableAccess();
         try {
             superUser1.runAs(new PrivilegedExceptionAction<Void>() {
                 @Override
@@ -235,4 +161,79 @@ public class TableDDLPermissionsIT extends BasePermissionsIT{
         }
     }
 
+    @Test
+    public void testSystemTablePermissions() throws Throwable {
+        final String tableName = generateUniqueName();
+        verifyAllowed(createTable(tableName), superUser1);
+        verifyAllowed(readTable(tableName), superUser1);
+
+        Set<String> tables = getHBaseTables();
+        if(isNamespaceMapped) {
+            assertTrue("HBase tables do not include expected Phoenix tables: " + tables,
+                    tables.containsAll(PHOENIX_NAMESPACE_MAPPED_SYSTEM_TABLES));
+        } else {
+            assertTrue("HBase tables do not include expected Phoenix tables: " + tables,
+                    tables.containsAll(PHOENIX_SYSTEM_TABLES));
+        }
+
+        // Grant permission to the system tables for the unprivileged user
+        superUser1.runAs(new PrivilegedExceptionAction<Void>() {
+            @Override
+            public Void run() throws Exception {
+                try {
+                    if(isNamespaceMapped) {
+                        grantPermissions(regularUser1.getShortName(),
+                                PHOENIX_NAMESPACE_MAPPED_SYSTEM_TABLES, Action.EXEC, Action.READ);
+                    } else {
+                        grantPermissions(regularUser1.getShortName(), PHOENIX_SYSTEM_TABLES,
+                                Action.EXEC, Action.READ);
+                    }
+                    grantPermissions(regularUser1.getShortName(),
+                            Collections.singleton(tableName), Action.READ,Action.EXEC);
+                } catch (Throwable e) {
+                    if (e instanceof Exception) {
+                        throw (Exception) e;
+                    } else {
+                        throw new Exception(e);
+                    }
+                }
+                return null;
+            }
+        });
+
+        // Make sure that the unprivileged user can now read the table
+        verifyAllowed(readTable(tableName), regularUser1);
+        //This verification is added to test PHOENIX-5178
+        superUser1.runAs(new PrivilegedExceptionAction<Void>() {
+            @Override public Void run() throws Exception {
+                try {
+                    if (isNamespaceMapped) {
+                        grantPermissions(regularUser1.getShortName(),"SYSTEM", Action.ADMIN);
+                    }
+                    return null;
+                } catch (Throwable e) {
+                    throw new Exception(e);
+                }
+
+            }
+        });
+        if(isNamespaceMapped) {
+            verifyAllowed(new AccessTestAction() {
+                @Override public Object run() throws Exception {
+                    Properties props = new Properties();
+                    props.setProperty(QueryServices.IS_NAMESPACE_MAPPING_ENABLED, Boolean.toString(isNamespaceMapped));
+                    props.setProperty(PhoenixRuntime.CURRENT_SCN_ATTRIB, Long.toString(MetaDataProtocol.MIN_SYSTEM_TABLE_TIMESTAMP));
+                    //Impersonate meta connection
+                    try (Connection metaConnection = DriverManager.getConnection(getUrl(), props);
+                         Statement stmt = metaConnection.createStatement()) {
+                        stmt.executeUpdate("CREATE SCHEMA IF NOT EXISTS SYSTEM");
+                    }catch(NewerSchemaAlreadyExistsException e){
+
+                    }
+                    return null;
+                }
+            }, regularUser1);
+        }
+    }
+
 }
diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/TableDDLPermissionsNSDisabledIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/TableDDLPermissionsNSDisabledIT.java
new file mode 100644
index 000000000..271baea27
--- /dev/null
+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/TableDDLPermissionsNSDisabledIT.java
@@ -0,0 +1,8 @@
+package org.apache.phoenix.end2end;
+
+public class TableDDLPermissionsNSDisabledIT extends TableDDLPermissionsIT {
+
+    public TableDDLPermissionsNSDisabledIT()  throws Exception {
+        super(false);
+    }
+}
diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/TableDDLPermissionsNSEnabledIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/TableDDLPermissionsNSEnabledIT.java
new file mode 100644
index 000000000..18053742c
--- /dev/null
+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/TableDDLPermissionsNSEnabledIT.java
@@ -0,0 +1,46 @@
+package org.apache.phoenix.end2end;
+
+import org.apache.hadoop.hbase.security.AccessDeniedException;
+import org.apache.hadoop.hbase.security.access.AccessControlClient;
+import org.apache.hadoop.hbase.security.access.Permission;
+import org.junit.Test;
+
+import java.security.PrivilegedExceptionAction;
+
+public class TableDDLPermissionsNSEnabledIT extends TableDDLPermissionsIT {
+
+    public TableDDLPermissionsNSEnabledIT() throws Exception {
+        super(true);
+    }
+
+    @Test
+    public void testSchemaPermissions() throws Throwable{
+        try {
+            final String schemaName = "TEST_SCHEMA_PERMISSION";
+            superUser1.runAs(new PrivilegedExceptionAction<Void>() {
+                @Override
+                public Void run() throws Exception {
+                    try {
+                        AccessControlClient.grant(getUtility().getConnection(), regularUser1.getShortName(),
+                                Permission.Action.ADMIN);
+                    } catch (Throwable e) {
+                        if (e instanceof Exception) {
+                            throw (Exception)e;
+                        } else {
+                            throw new Exception(e);
+                        }
+                    }
+                    return null;
+                }
+            });
+            verifyAllowed(createSchema(schemaName), regularUser1);
+            // Unprivileged user cannot drop a schema
+            verifyDenied(dropSchema(schemaName), AccessDeniedException.class, unprivilegedUser);
+            verifyDenied(createSchema(schemaName), AccessDeniedException.class, unprivilegedUser);
+
+            verifyAllowed(dropSchema(schemaName), regularUser1);
+        } finally {
+            revokeAll();
+        }
+    }
+}
