***************
*** 16,55 ****
   * limitations under the License.
   */
  package org.apache.phoenix.schema.stat;
  
- import java.util.Map;
- 
- import org.apache.hadoop.hbase.HRegionInfo;
- 
- import com.google.common.collect.ImmutableMap;
- 
- 
- /**
   * Implementation for PTableStats.
   */
  public class PTableStatsImpl implements PTableStats {
  
-     // The map for guide posts should be immutable. We only take the current snapshot from outside
-     // method call and store it.
-     private Map<String, byte[][]> regionGuidePosts;
  
-     public PTableStatsImpl() { }
  
-     public PTableStatsImpl(Map<String, byte[][]> stats) {
-         regionGuidePosts = ImmutableMap.copyOf(stats);
      }
  
-     @Override
-     public byte[][] getRegionGuidePosts(HRegionInfo region) {
-         return regionGuidePosts.get(region.getRegionNameAsString());
      }
  
      @Override
-     public Map<String, byte[][]> getGuidePosts(){
-       if(regionGuidePosts != null) {
-         return ImmutableMap.copyOf(regionGuidePosts);
-       }
-       
-       return null;
      }
  }
--- 16,46 ----
   * limitations under the License.
   */
  package org.apache.phoenix.schema.stat;
+  import java.util.List;
+ import java.util.TreeMap;
  
+ import org.apache.hadoop.hbase.util.Bytes;
+  
+  /**
   * Implementation for PTableStats.
   */
  public class PTableStatsImpl implements PTableStats {
  
+     public static final PTableStats NO_STATS = new PTableStatsImpl();
  
+     private TreeMap<byte[], List<byte[]>> guidePosts = new TreeMap<byte[], List<byte[]>>(Bytes.BYTES_COMPARATOR);
  
+     public PTableStatsImpl() {
+         this(new TreeMap<byte[], List<byte[]>>(Bytes.BYTES_COMPARATOR));
      }
  
+     public PTableStatsImpl(TreeMap<byte[], List<byte[]>> guidePosts) {
+         this.guidePosts = guidePosts;
      }
  
      @Override
+     public TreeMap<byte[], List<byte[]>> getGuidePosts() {
+         return guidePosts;
      }
+ 
  }
